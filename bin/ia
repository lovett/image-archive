#!/usr/bin/env rakudo

use DBIish;
use Terminal::ANSIColor;

use ImageArchive::Archive;
use ImageArchive::Color;
use ImageArchive::Config;
use ImageArchive::Database;
use ImageArchive::Exception;
use ImageArchive::Shell;
use ImageArchive::Hints;
use ImageArchive::Tagging;
use ImageArchive::Util;
use ImageArchive::Workspace;

our Str constant SCRIPT_VERSION = "2020.11.13";

proto MAIN(|) {
    # Suppress backtrace. Taken from zef's CLI.pm6.
    CATCH {
        default {
            try { ::("Rakudo::Internals").?LL-EXCEPTION } ?? .rethrow !! note colored(.message, 'red'); &*EXIT(1)
        }
    }
    {*}
}

#| Generate alternate image sizes.
multi sub MAIN('alts', Bool :$dryrun) {
    generateAlts($dryrun);
}

#| The average color of a file.
multi sub MAIN('color', Str $file where *.IO.f) {
    my @rgb = getAverageColor($file.IO);
    printf("rgb(%s)\n", @rgb.join(','));
}

#| The average color of files using search indexes.
multi sub MAIN('color', Str $index) {
    my @records = findByStashIndex($index, 'AverageRGB'.List);

    for @records -> $record {
        printf(
            "%-16s | %s\n",
            "rgb({$record[1]})",
            relativePath($record[0])
        );
    }
}

#| Generate the shell completion file.
multi sub MAIN('completion') {
    writeShellCompletion(SCRIPT_VERSION);
}

#| The number of files overall.
multi sub MAIN('count') {
    my $fileCount = countFiles();
    my $recordCount = countRecords();

    say pluralize($fileCount, 'file', 'files');

    if ($recordCount ne $fileCount) {
        say pluralize($recordCount, 'database record', 'database records');

        say qq:to/END/;

        {colored('Fix', 'cyan underline')}
          {$*PROGRAM-NAME} reindex

        {colored('View', 'cyan underline')}
          {$*PROGRAM-NAME} search:unindexed
        END
    }
}

#| The number of files per year.
multi sub MAIN('count:years') {
    for countRecordsByYear() -> $tally {
        my $year = $tally[0];
        $year = 'Undated' if $year == 0;
        printf("%7s | %s\n", $year, $tally[1]);
    }
}

#| The number of files per month in a given year.
multi sub MAIN('count', Int $year) {
    for countRecordsByMonth($year) -> $tally {
        my $month = $tally[0] == 0 ?? 'Unknown' !! monthName($tally[0]);
        printf("%10s | %s\n", $month, $tally[1]);
    }
}

#| Start a database CLI session.
multi sub MAIN('dbshell') {
    my $dbPath = getPath('database');
    run 'sqlite3', $dbPath;
}

#| Taka a file out of the archive.
multi sub MAIN('deport', Str $file where *.IO.f, Bool :$dryrun) {
    my $target = findFile($file);

    deportFile($target, $*CWD.IO, $dryrun);

    my $workspace = findWorkspace($target);
    if ($workspace ~~ :d) {
        deportWorkspace($workspace, $*CWD.IO, $dryrun);
    }
}

#| Take a file out of the archive using search indexes.
multi sub MAIN('deport', Str $index, Bool :$dryrun) {
    my @records = findByStashIndex($index);

    for @records -> $record {
        my $file = findFile($record[0]);
        deportFile($file, $*CWD.IO, $dryrun);

        my $workspace = findWorkspace($file);
        if ($workspace ~~ :d) {
            deportWorkspace($workspace, $*CWD.IO, $dryrun);
        }
    }
}

#| Bring a file into the archive.
multi sub MAIN('import', Str $file where *.IO.f, Bool :$dryrun) {
    importFile($file.IO, $dryrun);
}

#| Replace an archive file with a workspace file.
multi sub MAIN('promote', Str $file, Bool :$dryrun) {
    my $target = findFile($file);

    workspaceExport($target, $dryrun);

    CATCH {
        when ImageArchive::Exception::PathNotFoundInWorkspace {
            note colored($_.message, 'red');
            exit 1;
        }
    }
}

#| Re-add imported files to the database.
multi sub MAIN('reindex') {
    my $root = getPath('root');

    for walkArchive($root) -> $path {
        print "Reindexing {$path}...";
        # Don't add any new tags, but do add auto-generated ones.
        tagFile($path, {});
        indexFile($path);
        say "done.";
    }
}

#| Re-add imported files to the database using search index.
multi sub MAIN('reindex', Str $index) {
    my @records = findByStashIndex($index);

    for @records -> $record {
        my $path = findFile($record[0]);
        print "Reindexing {$path}...";
        tagFile($path, {});
        indexFile($path);
        say "done.";
    }
}

#| Redo question-and-answer tagging.
multi sub MAIN('reprompt', Str $file where *.IO.f, Bool :$dryrun = False) {
    my %tags = askQuestions();
    tagFile($file.IO, %tags, $dryrun);

    if (isArchiveFile($file.IO)) {
        indexFile($file.IO);
    }
}

#| Redo question-and-answer tagging using search indexes.
multi sub MAIN('reprompt', Str $index, Bool :$dryrun = False) {
    my @records = findByStashIndex($index);

    for @records -> $record {
        my $path = findFile($record[0]);
        my %tags = askQuestions();
        tagFile($path, %tags, $dryrun);
        indexFile($path);
    }
}

#| Find files by tag.
multi sub MAIN('search', Bool :$debug = False, *@terms) {

    my $query = @terms.join(' ');

    my $counter = 0;
    for findByTag($query, $debug) -> $result {
        my $index = sprintf("%3d", ++$counter);
        my $series = sprintf('%s-%03d', $result<series>, $result<seriesid>);

        printf(
            "%s | %15s | %s\n",
            colored($index, 'white on_blue'),
            $series,
            $result<path>
        );
    }

    unless ($counter) {
        note 'No matches.';
    }

    CATCH {
        when ImageArchive::Exception::BadFilter {
            note colored($_.message, 'red');
            suggestFilters();
            exit 1;
        }
    }
}

multi sub MAIN('search') is hidden-from-USAGE {
    die ImageArchive::Exception::NoSearchQuery.new;
}

#| Find files by color similarity.
multi sub MAIN('search:color', Str $file where *.IO.f) {
    my @rgb = getAverageColor($file.IO);

    my $counter = 0;
    for findBySimilarColor(@rgb) -> $result {
        my $index = sprintf("%3d", ++$counter);
        my $score = sprintf("%2.2f", $result<score>);

        printf(
            "%s | %s | %s\n",
            colored($index, 'white on_blue'),
            $score,
            $result<path>
        );
    }

    unless ($counter) {
        note 'No matches.';
    }
}

#| Find file that are not in the database.
multi sub MAIN('search:unindexed') {
    my $counter = 0;

    for findUnindexed() -> $path {
        my $index = sprintf("%3d", ++$counter);
        printf(
            "%s | %s\n",
            colored($index, 'white on_red'),
            relativePath($path),
        );
    }

    unless $counter {
        say "No unindexed files.";
    }
}

#| Establish the application configuration and database.
multi sub MAIN('setup', Str $directory where *.IO.d) {
    writeApplicationConfig($directory.IO);

    writeArchiveConfig();

    createDatabase();

    writeShellCompletion(SCRIPT_VERSION);

    addWorkspaceShortcuts();
}

#| Display a file's tags.
multi sub MAIN('show', Str $file where *.IO.f) {
    say readTags($file.IO);
}

#| Display tags using search indexes.
multi sub MAIN('show', $indexes) {
    my @records = findByStashIndex($indexes);

    for @records -> $record {
        my $file = findFile($record[0]);
        say readTags($file);
    }
}

#| Redisplay the results of the previous search.
multi sub MAIN('show:search') {
    my $counter = 0;
    for dumpStash() -> $result {
        my $index = sprintf("%3d", ++$counter);
        my $series = sprintf('%s-%03d', $result<series>, $result<seriesid>);

        printf(
            "%s | %15s | %s\n",
            colored($index, 'white on_blue'),
            $series,
            $result<path>
        );
    }
}

#| Add tags to a file.
multi sub MAIN('tag', Str $file where *.IO.f, Bool :$dryrun = False, *@keywords) {
    testKeywords(@keywords);

    # If the file has id and alias tags, consider it previously tagged
    # and skip context validation.
    my $previouslyTagged = readRawTags($file.IO, ['id', 'alias']).elems == 2;

    my %tags = keywordsToTags(@keywords);

    unless ($previouslyTagged) {
        my @contexts = activeContexts(@keywords);

        testContexts(@contexts);

        testContextCoverage(@contexts, @keywords);

        %tags.append(askQuestions());
    }

    %tags<alias> = @keywords;

    tagFile($file.IO, %tags, $dryrun);

    if ($dryrun) {
        return;
    }

    if (isArchiveFile($file.IO)) {
        indexFile($file.IO);
        return;
    }

    confirm('Tags written. Import to archive?');
    importFile($file.IO, $dryrun);

    CATCH {
        when ImageArchive::Exception::MissingContext {
            note colored($_.message, 'red');
            suggestContextKeywords($_.offenders);
            exit 1;
        }
    }
}

#| Add tags using search indexes.
multi sub MAIN('tag', Str $index, Bool :$dryrun = False, *@keywords) {
    my @records = findByStashIndex($index);

    my %tags = keywordsToTags(@keywords);

    for @records -> $record {
        my $path = findFile($record[0]);
        tagFile($path, %tags, $dryrun);

        unless ($dryrun) {
            indexFile($path);
        }
    }
}

#| Remove tags by alias.
multi sub MAIN('untag:alias', Str $file where *.IO.f, Str $alias, Bool :$dryrun = False, ) {
    untagAlias($file.IO, $alias, $dryrun);

    if (isArchiveFile($file.IO)) {
        indexFile($file.IO);
    }
}

#| Remove tags by alias using search indexes.
multi sub MAIN('untag:alias', Str $index, Str $alias, Bool :$dryrun = False) {
    my @records = findByStashIndex($index);

    for @records -> $record {
        my $path = findFile($record[0]);
        untagAlias($path, $alias, $dryrun);

        if (isArchiveFile($path)) {
            indexFile($path);
        }
    }
}

#| Remove tags by keyword.
multi sub MAIN('untag:keyword', Str $file where *.IO.f, Str $keyword, Bool :$dryrun = False) {
    untagKeyword($file.IO, $keyword, $dryrun);
}

#| Remove tags by keyword using search indexes.
multi sub MAIN('untag:keyword', Str $index, Str $keyword, Bool :$dryrun = False) {
    my @records = findByStashIndex($index);

    for @records -> $record {
        my $path = findFile($record[0]);
        untagKeyword($path, $keyword, $dryrun);

        if (isArchiveFile($path)) {
            indexFile($path);
        }
    }
}

#| Remove a tag by value.
multi sub MAIN('untag:value', Str $file where *.IO.f, Str $alias, Str $value, Bool :$dryrun = False) {
    untagValue($file.IO, $alias, $value, $dryrun);
}

#| Remove a tag by value using search indexes.
multi sub MAIN('untag:value', Str $index, Str $alias, Str $value, Bool :$dryrun = False) {
    my @records = findByStashIndex($index);

    for @records -> $record {
        my $path = findFile($record[0]);
        untagValue($path, $alias, $value, $dryrun);

        if (isArchiveFile($path)) {
            indexFile($path);
        }
    }
}

#| Remove a tag by value in all files.
multi sub MAIN('untag:value', 'allfiles', Str $alias, Str $value, Bool :$dryrun = False) {
    archiveUntagValue($alias, $value, $dryrun);
}

#| Display a file.
multi sub MAIN('view', Str $file where *.IO.f) {
    my @targets = findFile($file);
    viewFiles(@targets);
}

# Display files by search index.
multi sub MAIN('view', $index) {
    my @records = findByStashIndex($index);

    my @targets = @records.map({ $_[0] });

    viewFiles(@targets);
}

#| Set up an editing workspace.
multi sub MAIN('workon', Str $file where *.IO.f) {
    my $target = findFile($file);

    copyToWorkspace($target.IO);

    viewWorkspaceShortcuts();
}

# Set up an editing workspace by search index.
multi sub MAIN('workon', $index) {
    my @records = findByStashIndex($index);

    for @records -> $record {
        my $path = findFile($record[0]);
        my $version = copyToWorkspace($path.IO);
    }

    viewWorkspaceShortcuts();
}

#| Display the application version.
multi sub MAIN(Bool :$version) {
    say SCRIPT_VERSION if $version;
}

sub USAGE() {
    if @*ARGS.elems == 2 && @*ARGS.first eq '--help' {
        my $command = @*ARGS[1];
        my $shortSummary = $*USAGE.lines.grep( / ' ' $command ' ' / ).first;

        if ($shortSummary) {
            say "Usage:";
            say $shortSummary;

            if ($command eq 'search') {
                say explainSearchSynax();
            }
            return;
        }


    }

    say $*USAGE;
}

# Local Variables:
# mode: raku
# End:
