#!/usr/bin/env rakudo

use lib $*PROGRAM.IO.parent(2).add('lib');

#| Display a target's average color.
multi sub MAIN("color", Str $target) {
    run-command("color", $target);
}

#| Find files by color similarity.
multi sub MAIN("colormatch", Str $target) {
    run-command("colormatch", $target);
}

#| Generate the shell completion file.
multi sub MAIN("completion") {
    run-command("completion");
}

#| Number of files in the archive.
multi sub MAIN("count", "files") {
    run-command("count", "files");
}

#| Number of files per month in a given year.
multi sub MAIN("count", "months", Int $year) {
    run-command("count", "months", $year);
}

#| Number of files per year.
multi sub MAIN("count", "years") {
    run-command("count", "years");
}

#| Take a target out of the archive.
multi sub MAIN("deport", Str $target, Bool :$dryrun = False) {
    run-command("deport", $target, :$dryrun);
}

#| Files with dormant workspaces.
multi sub MAIN("find", "finished") {
    run-command("find", "finished");
}

#| Files that have edits in progress.
multi sub MAIN("find", "inprogress") {
    run-command("find", "inprogress");
}

#| Perform cleanup chores on the archive.
multi sub MAIN("fixup", Bool :$dryrun = False) {
    run-command("fixup", $dryrun);
}

#| Associate images based on a task or project.
multi sub MAIN("group", Str $target, Str $name, Bool :$dryrun = False) {
    run-command("group", $target, $name, $dryrun);
}

#| Command-specific documentation.
multi sub MAIN("help", Str $command?) {
    run-command("help", $command);
}

#| Display a target's edit history.
multi sub MAIN("history", Str $target) {
    run-command("history", $target);
}

#| Bring a file into the archive.
multi sub MAIN("import", Str $file where *.IO.f, Bool :$dryrun = False) {
    run-command("import", $file, $dryrun);
}

#| Redisplay the results of the previous search.
multi sub MAIN("lastsearch") {
    run-command("lastsearch");
}

#| Replace an archive file with a workspace version.
multi sub MAIN("promote", Str $version where *.IO.f, Bool :$dryrun = False) {
    run-command("promote", $version, $dryrun);
}

#| View the previous search in a web browser.
multi sub MAIN("publish") {
    run-command("publish");
}

#| Re-add imported files to the database.
multi sub MAIN("reindex", Str $target?) {
    run-command("reindex", $target);
}

#| Overwrite an imported file.
multi sub MAIN("replace", Str $target, Str $substitue where *.IO.f, Bool :$dryrun = False) {
    run-command("replace", $target, $substitue, $dryrun);
}

#| Redo question-and-answer taging.
multi sub MAIN("reprompt", Str $target, Bool :$dryrun = False) {
    run-command("reprompt", $target, $dryrun);
}

#| Archive-wide untag by keyword or alias.
multi sub MAIN("scrub", Str $term, Str $value = '', Bool :$dryrun = False) {
    require ImageArchive::Command::Scrub;
    ImageArchive::Command::Scrub::make-it-so($term, $value, $dryrun);
}

#| Find files within the archive.
multi sub MAIN("search", Int :$limit = 10, Bool :$debug = False, *@terms) {
    my $query = @terms.join(" ");
    run-command("search", $query, $limit, $debug);
}

#| Create a new archive.
multi sub MAIN("setup", Str $path?) {
    %*ENV<IA_ROOT> = $path.IO.absolute if $path;
    run-command("setup");
    run-command("completion");
    if ($path) {
        say "Be sure to set the IA_ROOT environment variable to {$path.IO.absolute} in your shell.";
    }
}

#| Display a file's tags.
multi sub MAIN("show", Str $target) {
    run-command("show", $target);
}

#| Add tags to a file.
multi sub MAIN("tag", Str $target, Bool :$dryrun = False, *@keywords) {
    run-command("tag", $target, $dryrun, @keywords);
}

#| List out TODO lines in workspace history files.
multi sub MAIN("todo", Str $directory?) {
    run-command("todo", $directory);
}

#| Find file that are not in the database.
multi sub MAIN("unindexed") {
    run-command("unindexed");
}

#| Remove a group name.
multi sub MAIN("ungroup", Str $target, Str $name, Bool :$dryrun = False) {
    run-command("ungroup", $target, $name, $dryrun);
}

#| Remove tags by keyword or alias.
multi sub MAIN("untag", Str $target, Str $term, Str $value = '', Bool :$dryrun = False) {
    run-command("untag", $target, $term, $value, $dryrun);
}

#| Display a file.
multi sub MAIN("view", Str $target, Bool :$original) {
    run-command("view", $target, $original);
}

#| Navigate to a file.
multi sub MAIN("visit", Str $target) {
    run-command("visit", $target);
}

#| Set up or return to a file's editing workspace.
multi sub MAIN("workon", Str $target) {
    run-command("workon", $target);
}

#| Display the application version.
multi sub MAIN("version") {
    run-command("version");
}

sub run-command(Str $command, *@args) {
    require ::("ImageArchive::Command::{$command.tc}") <&make-it-so>;
    make-it-so(|@args);
}

# Local Variables:
# mode: raku
# End:
