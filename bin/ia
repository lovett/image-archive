#!/usr/bin/env rakudo

use Terminal::ANSIColor;

use ImageArchive::Activity;
use ImageArchive::Archive;
use ImageArchive::Color;
use ImageArchive::Config;
use ImageArchive::Database;
use ImageArchive::Exception;
use ImageArchive::Shell;
use ImageArchive::Hints;
use ImageArchive::Tagging;
use ImageArchive::Util;
use ImageArchive::Workspace;

#| Display a target's average RGB color.
multi sub MAIN('color', Str $target) {
    my @targets = resolveFileTarget($target, 'original');
    printColorTable(@targets);
}

#| Generate the shell completion file.
multi sub MAIN('completion') {
    writeShellCompletion();
}

#| Start a database CLI session.
multi sub MAIN('dbshell') {
    openDatabaseSession();
}

#| Take a target out of the archive.
multi sub MAIN('deport', Str $target, Bool :$dryrun) {
    my @targets = resolveFileTarget($target, 'original');
    deportFiles(@targets, $*CWD.IO, $dryrun);
}

#| Perform cleanup chores on the archive.
multi sub MAIN('fixup', Bool :$dryrun) {
    pruneEmptyDirsDownward('', $dryrun);
    generateAlts($dryrun);
}

#| Display a target's edit history.
multi sub MAIN('history', Str $target) {
    my @targets= resolveFileTarget($target, 'original');
    printHistory(@targets);
}

#| Bring a file into the archive.
multi sub MAIN('import', Str $file where *.IO.f, Bool :$dryrun) {
    import($file.IO, $dryrun);
}

#| Replace an archive file with a workspace version.
multi sub MAIN('promote', Str $version where *.IO.f, Bool :$dryrun) {
    promoteVersion($version.IO, $dryrun);
}

#| Re-add imported files to the database using search index.
multi sub MAIN('reindex', Str $target?) {
    reindex($target);
}

#| Redo question-and-answer tagging.
multi sub MAIN('reprompt', Str $target, Bool :$dryrun = False) {
    my @targets = resolveFileTarget($target, 'taggable');
    reprompt(@targets, $dryrun);
}

#| Locate files within the archive.
multi sub MAIN('search', Int :$limit = 10, Bool :$debug = False, *@terms) {
    my @results = search(@terms, $limit, $debug);
    printSearchResults(@results, 'series');
}

multi sub MAIN('search') is hidden-from-USAGE {
    die ImageArchive::Exception::NoSearchQuery.new;
}

#| Establish the application configuration and database.
multi sub MAIN('setup', Str $directory where *.IO.d) {
    writeApplicationConfig($directory.IO);
    writeArchiveConfig();
    createDatabase();
    writeShellCompletion();
}

#| Display a file's tags.
multi sub MAIN('show', Str $target) {
    my @targets = resolveFileTarget($target, 'taggable');
    showTags(@targets);
}

#| Redisplay the results of the previous search.
multi sub MAIN('show:search') {
    my @results = dumpStash('searchresult');
    printSearchResults(@results, 'series');
}

#| Find files by color similarity.
multi sub MAIN('similar:color', Str $target) {
    my @targets = resolveFileTarget($target, 'taggable');
    my @rgb = getAverageColor(@targets.first.IO);
    my @results = findBySimilarColor(@rgb, 'searchresult');
    printSearchResults(@results, 'score');
}

#| The number of files in the archive.
multi sub MAIN('stats:count') {
    countFiles();
}

#| The number of files per month in the given year.
multi sub MAIN('stats:year', Int $year) {
    countMonths($year);
}

#| The number of files per year.
multi sub MAIN('stats:years') {
    countYears();
}

#| Add tags to a file.
multi sub MAIN('tag', Str $target, Bool :$dryrun, *@keywords) {
    my @targets = resolveFileTarget($target, 'taggable');
    tagAndImport(@targets, @keywords, $dryrun);
}

#| List out TODO lines in workspace history files.
multi sub MAIN('todo', Str $directory?) {
    searchLogs(/TODO/, $directory);
}

#| Find file that are not in the database.
multi sub MAIN('unindexed') {
    printUnindexed();
}

#| Remove tags by alias or value.
multi sub MAIN('untag:alias', Str $target, Str $alias, Str $value?, Bool :$dryrun = False, ) {
    given $target {
        when 'allfiles' {
            removeAliasFromArchive($alias, $value, $dryrun);
        }

        default {
            my @targets = resolveFileTarget($target, 'taggable');
            untagByAlias(@targets, $alias, $value, $dryrun);
        }
    }
}

#| Remove tags by keyword.
multi sub MAIN('untag:keyword', Str $target, Str $keyword, Bool :$dryrun = False) {
    given $target {
        when 'allfiles' {
            removeKeywordFromArchive($keyword, $dryrun);
        }

        default {
            my @targets = resolveFileTarget($target, 'taggable');
            untagByKeyword(@targets, $keyword, $dryrun);
        }
    }
}

#| Display a file alternate by path or search index.
multi sub MAIN('view', Str $target) {
    my @targets = resolveFileTarget($target);
    viewFiles(@targets);
}

#| Display an original file by path or search index.
multi sub MAIN('view:original', Str $target) {
    my @targets = resolveFileTarget($target, 'original');
    viewFiles(@targets);
}

#| Navigate to an archive file by path or search index.
multi sub MAIN('visit', Str $target) {
    my @targets = resolveFileTarget($target, 'parent');
    viewDirectories(@targets);
}

#| Set up an editing workspace by path or search index.
multi sub MAIN('workon', $target) {
    my @targets = resolveFileTarget($target, 'original');
    my $workspace = copyToWorkspace(@targets.first);
    viewDirectories($workspace.list);
}

#| Display the application version.
multi sub MAIN(Bool :$version) {
    say applicationVersion() if $version;
}

sub USAGE() {
    if @*ARGS.first eq '--help' and @*ARGS.elems == 2 {
        explainSyntax(@*ARGS[1]);
        return;
    }

    say $*USAGE;
}

# Local Variables:
# mode: raku
# End:
