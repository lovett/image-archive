#!/usr/bin/env rakudo

use lib $*PROGRAM.absolute.IO.parent(2).add('lib');

use ImageArchive::Activity;
use ImageArchive::Archive;
use ImageArchive::Color;
use ImageArchive::Config;
use ImageArchive::Database;
use ImageArchive::Shell;
use ImageArchive::Publish;
use ImageArchive::Tagging;
use ImageArchive::Util;
use ImageArchive::Workspace;

#| Display a target's average color.
multi sub MAIN('color', Str $target) {
    my @targets = resolveFileTarget($target);
    printColorTable(@targets);
}

#| Find files by color similarity.
multi sub MAIN('colormatch', Str $target) {
    my @targets = resolveFileTarget($target);
    my @rgb = getAverageColor(@targets.first.IO);
    my @results = findBySimilarColor(@rgb, 'searchresult');
    printSearchResults(@results);
}

#| Generate the shell completion file.
multi sub MAIN('completion') {
    writeShellCompletion();
}

#| Take a target out of the archive.
multi sub MAIN('deport', Str $target, Bool :$dryrun) {
    my @targets = resolveFileTarget($target);
    deportFiles(@targets, $*CWD.IO, $dryrun);
}

#| The number of files in the archive.
multi sub MAIN('filecount') {
    countFiles();
}

#| Files with dormant workspaces.
multi sub MAIN('finished') {
    my @results = walkWorkspaces('inactive');
    printSearchResults(@results);
}

#| Perform cleanup chores on the archive.
multi sub MAIN('fixup', Bool :$dryrun) {
    pruneEmptyDirsDownward('', $dryrun);
    verifyDateTags($dryrun);
    generateAlts($dryrun);
}

#| Associate images based on a task or project.
multi sub MAIN('group', Str $target, Str $name, Bool :$dryrun) {
    my @targets = resolveFileTarget($target);
    groupFiles(@targets, $name, $dryrun);
}

#| Display a target's edit history.
multi sub MAIN('history', Str $target) {
    my @targets = resolveFileTarget($target);
    printHistory(@targets);
}

#| Bring a file into the archive.
multi sub MAIN('import', Str $file where *.IO.f, Bool :$dryrun) {
    import($file.IO, $dryrun);
}

#| Files that have edits in progress.
multi sub MAIN('inprogress') {
    my @results = walkWorkspaces('active');
    printSearchResults(@results);
}

#| Redisplay the results of the previous search.
multi sub MAIN('lastsearch') {
    my @results = dumpStash('searchresult');
    printSearchResults(@results);
}

#| Count files per month in a given year.
multi sub MAIN('monthcount', Int $year) {
    countMonths($year);
}

#| Replace an archive file with a workspace version.
multi sub MAIN('promote', Str $version where *.IO.f, Bool :$dryrun) {
    promoteVersion($version.IO, $dryrun);
}

#| View the previous search in a web browser.
multi sub MAIN('publish') {
    my @results = dumpStash('searchresult');
    my $path = publishHtml(@results);
    viewExternally($path);
}

#| Re-add imported files to the database.
multi sub MAIN('reindex', Str $target?) {
    if ($target) {
        my @paths = resolveFileTarget($target);
        reindex(@paths);
        return;
    }

    my $root = getPath('root');
    my @paths =  walkArchive($root).List;
    reindex(@paths);
}

#| Overwrite an imported file.
multi sub MAIN('replace', Str $target, Str $substitue where *.IO.f, Bool :$dryrun = False) {
    my @targets = resolveFileTarget($target);
    replaceFilePreservingName(@targets.first.IO, $substitue.IO, $dryrun);
}

#| Redo question-and-answer taging.
multi sub MAIN('reprompt', Str $target, Bool :$dryrun = False) {
    my @targets = resolveFileTarget($target);
    reprompt(@targets, $dryrun);
}

#| Archive-wide untag by keyword or alias.
multi sub MAIN('scrub', Str $term, Str $value = '', Bool :$dryrun = False) {
    untagTerm($term, $value, $dryrun);
}

#| Find files within the archive.
multi sub MAIN('search', Int :$limit = 10, Bool :$debug = False, *@terms) {
    unless (@terms) {
        note 'No search terms were provided.';
        exit 1;
    }

    my @results = search(@terms, $limit, $debug);
    printSearchResults(@results);
}

#| Create a new archive.
multi sub MAIN("setup", Str $path?) {
    %*ENV<IA_ROOT> = $path.IO.absolute if $path;
    use ImageArchive::Command::Setup;
    ImageArchive::Command::setup();
    if ($path) {
        say "Be sure to set the IA_ROOT environment variable to {$path.IO.absolute} in your shell.";
    }
}

#| Display a file's tags.
multi sub MAIN('show', Str $target) {
    my @targets = resolveFileTarget($target);
    showTags(@targets);
}

#| Add tags to a file.
multi sub MAIN('tag', Str $target, Bool :$dryrun, *@keywords) {
    my @targets = resolveFileTarget($target);
    tagAndImport(@targets, @keywords, $dryrun);
}

#| List out TODO lines in workspace history files.
multi sub MAIN('todo', Str $directory?) {
    searchLogs(/TODO/, $directory);
}

#| Find file that are not in the database.
multi sub MAIN('unindexed') {
    printUnindexed();
}

#| Remove a group name.
multi sub MAIN('ungroup', Str $target, Str $name, Bool :$dryrun) {
    my @targets = resolveFileTarget($target);
    ungroupFiles(@targets, $name, $dryrun);
}


#| Remove tags by keyword or alias.
multi sub MAIN('untag', Str $target, Str $term, Str $value = '', Bool :$dryrun = False) {
    my @targets = resolveFileTarget($target);
    untagTerm(@targets, $term, $value, $dryrun);
}

#| Display a file.
multi sub MAIN('view', Str $target, Bool :$original) {
    my $flavor = ($original ?? 'original' !! 'alternate');
    my @targets = resolveFileTarget($target, $flavor);
    viewExternally(@targets);
}

#| Navigate to a file.
multi sub MAIN('visit', Str $target) {
    my @targets = resolveFileTarget($target, 'parent');
    viewExternally(@targets);
}

#| Set up or return to a file's editing workspace.
multi sub MAIN('workon', $target) {
    my @targets = resolveFileTarget($target);
    my $workspace = copyToWorkspace(@targets.first);
    viewExternally($workspace);
}

#| Count files per year.
multi sub MAIN('yearcount') {
    countYears();
}

#| Display the application version.
multi sub MAIN(Bool :$version) {
    say applicationVersion() if $version;
}

sub USAGE() {
    if @*ARGS.first eq '--help' and @*ARGS.elems == 2 {
        use ImageArchive::Help;
        explainSyntax(@*ARGS[1]);
        return;
    }

    say $*USAGE;
}

# Local Variables:
# mode: raku
# End:
