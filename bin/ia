#!/usr/bin/env rakudo

use DBIish;
#use Grammar::Tracer;
use Terminal::ANSIColor;

use ImageArchive::Archive;
use ImageArchive::Config;
use ImageArchive::Database;
use ImageArchive::Exception;
use ImageArchive::Shell;
use ImageArchive::Suggestion;
use ImageArchive::Tagging;
use ImageArchive::Util;
use ImageArchive::Workspace;

our Str constant SCRIPT_VERSION = "2020.10.24";

# Entry points
# ------------------------------------------------------------------------
proto MAIN(|) {
    # Suppress backtrace. Taken from zef's CLI.pm6.
    CATCH {
        default {
            try { ::("Rakudo::Internals").?LL-EXCEPTION } ?? .rethrow !! note colored(.message, 'red bold'); &*EXIT(1)
        }
    }
    {*}
}

#| Start a database CLI session.
multi sub MAIN('dbshell') {
    my $dbPath = getPath('database');
    run 'sqlite3', $dbPath;
}

#| Make an editable copy of a file in the archive.
multi sub MAIN('version', $file where *.IO.f) {
    my $configKey = 'view_workspace';
    my $viewCommand = readConfig($configKey);

    my $version = workspaceImport($file.IO);

    say "The workspace is: " ~ colored($version.parent.Str, 'cyan');
    say "The version is: " ~ colored($version.Str, 'yellow');

    if ($viewCommand) {
        openWorkspace($file.IO, $viewCommand);
    }
}

#| Find images in the archive by their tags.
multi sub MAIN('search', *@terms) {
    my $query = @terms.join(' ');

    my $counter = 0;
    for searchMetadata($query) -> $result {
        my $index = colored(sprintf("%3d", ++$counter), 'cyan');
        say " $index $result";
    }

    unless ($counter) {
        note 'No matches.';
    }

    CATCH {
        when ImageArchive::Exception::BadFilter {
            note colored($_.message, 'red bold');
            suggestFilters();
            exit 1;
        }
    }
}

multi sub MAIN('search') is hidden-from-USAGE {
    die ImageArchive::Exception::NoSearchQuery.new;
}

#| Move a file out of the archive.
multi sub MAIN('deport', Str $file, Bool :$dryrun) {
    my $target;

    if ($file.IO ~~ :f) {
        $target = $file.IO;
    } else {
        my $root = getPath('root');
        $target = $root.add($file);
    }

    deportFile($target, $*CWD.IO, $dryrun);
}

#| Do-over for question-and-answer tagging.
multi sub MAIN('reprompt', Str $file where *.IO.f, Bool :$dryrun = False) {
    my %tags = askQuestions();
    tagFile($file.IO, %tags, $dryrun);
}

#| Re-index files already in the archive.
multi sub MAIN('reimport') {
    my $root = getPath('root');
    my $callback = sub ($path) {
        indexFile($root.add($path));
        say "Reindexed {$path}";
    }

    walkArchive($callback);
}

#| Bring a file into the archive.
multi sub MAIN('import', Str $file where *.IO.f, Bool :$dryrun) {
    my $root = getPath('root');

    my $tagValue = readRawTag($file.IO, 'datecreated') || 'undated';

    my $destinationDir = $root.add($tagValue.subst(":", "/", :g));

    importFile($file.IO, $destinationDir);
}

#| Summarize the contents of the archive.
multi sub MAIN('stats') {
    my %counts;

    my $callback = sub ($path) {
        my $topDir =  $path.split('/', 2).first;
        %counts{$topDir}++;
    }

    walkArchive($callback);

    my $fileCount = %counts.values.reduce: &infix:<+>;
    my $fileLabel = ($fileCount == 1) ?? 'file' !! 'files';

    given $fileCount {
        when 0 {
            say "Found no files.";
        }

        default {
            my $format = "%10s: %{$fileCount.Str.chars}d";

            for %counts.keys.sort -> $key {
                my $total = %counts{$key};
                sprintf($format, $key, $total).say;
            }

            sprintf($format, 'TOTAL', $fileCount).say;
        }
    }

    my $recordCount = countRecords();
    my $recordLabel = ($recordCount == 1) ?? 'record' !! 'records';

    if ($recordCount !== $fileCount) {
        say "";
        note colored("The database contains $recordCount $recordLabel.", 'red');
    }
}

#| Annotate a file with metadata.
multi sub MAIN('tag', Str $file where *.IO.f, Bool :$dryrun = False, *@keywords) {
    testPathExistsInArchive($file.IO);
    testKeywords(@keywords);

    # If the file has id and alias tags, consider it previously tagged
    # and skip context validation.
    my $previouslyTagged = readRawTags($file.IO, ['id', 'alias']).elems == 2;

    my %tags = keywordsToTags(@keywords);

    unless ($previouslyTagged) {
        my @contexts = activeContexts(@keywords);

        testContexts(@contexts);

        testContextCoverage(@contexts, @keywords);

        %tags.append(askQuestions());
    }

    %tags<alias> = @keywords;

    tagFile($file.IO, %tags, $dryrun);

    CATCH {
        when ImageArchive::Exception::MissingContext {
            note colored($_.message, 'red bold');
            suggestContextKeywords($_.offenders);
            exit 1;
        }
    }
}

#| Generate alternate image sizes.
multi sub MAIN('alts') {
    generateAlts();
}

#| Remove a tag completely.
multi sub MAIN('untag:alias', Str $file where *.IO.f, Str $alias, Bool :$dryrun = False, ) {
    untagAlias($file.IO, $alias, $dryrun);
}

#| Remove a value from a tag.
multi sub MAIN('untag:value', Str $file where *.IO.f, Str $alias, Str $value, Bool :$dryrun = False, ) {
    untagAlias($file.IO, $alias, $value, $dryrun);
}

#| Remove tags via keyword.
multi sub MAIN('untag:keyword', Str $file where *.IO.f, Str $keyword, Bool :$dryrun = False) {
    untagKeyword($file.IO, $keyword, $dryrun);
}

#| Display one or more files from the previous search.
multi sub MAIN('view', *@terms) {
    my Str $terms = @terms.join(' ');
    my Str $target;

    my %rootConfig = readConfig('_');
    my $command = %rootConfig<view_file>;

    unless ($command) {
        die ImageArchive::Exception::MissingConfig.new(:key('view_file'));
    }

    given $terms {
        when / <[\d,- ]> / {

            my @indices;
            my @ranges;

            $terms ~~ s:global/ (\d) \- (\d) //;
            @ranges = ( "(rownum BETWEEN {.list[0]} AND {.list[1]})" for @$/ );

            m:global/ (\d+) / with $terms;
            @indices = @$/;

            my $rangeSql = @ranges.join(' OR ');

            if ($rangeSql && @indices) {
                $rangeSql ~= " OR ";
            }

            if (@indices) {
                $rangeSql ~= "rownum IN (" ~ @indices.join(',') ~ ")";
            }

            my $dbh = openDatabase();

            my $sth = $dbh.execute("SELECT * FROM (
            SELECT json_extract(a.tags, '\$.SourceFile') as path, row_number()
            OVER (ORDER BY h.id) as rownum
            FROM archive a, history h
            WHERE a.id=h.value
            AND h.key='searchresults')
            WHERE $rangeSql");

            for $sth.allrows() -> $row {
                $target ~= $row[0] ~ ' '
            }

            $dbh.dispose;
        }

        default {
            my $path = $terms.IO;

            my $root = getPath('root');
            unless ($path.absolute.starts-with($root)) {
                $path = $root.add($terms);
            }

            if ($target ~~ :f) {
                $target = $path.Str;
            }
        }
    }

    unless ($target) {
        exit;
    }

    my $proc = run qqw{$command $target}, :err;
    my $err = $proc.err.slurp(:close);

    if ($proc.exitcode !== 0) {
        die ImageArchive::Exception::BadExit.new(:err($err));
    }
}

#| Display a file's tags.
multi sub MAIN('dump', Str $file where *.IO.f, *@aliases) {
    my %prompts = readConfig('prompts');
    unless @aliases.elems > 0 {
        @aliases = ['alias'].append: %prompts.keys;
    }

    my %tags = readRawTags($file.IO, @aliases, '-f');

    for %tags.kv -> $alias, $value {
        say "{$alias}: {$value}";
    }
}

#| Update the shell completion file.
multi sub MAIN('completion') {
    writeShellCompletion(SCRIPT_VERSION);
}

#| Establish the application's configuration and database.
multi sub MAIN('setup', Str $directory where *.IO.d) {
    writeApplicationConfig($directory.IO);

    writeArchiveConfig();

    applyDatabaseSchema();

    writeShellCompletion(SCRIPT_VERSION);
}

#| Display version information.
multi sub MAIN(Bool :$version) {
    say SCRIPT_VERSION if $version;
}
